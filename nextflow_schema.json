{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/sangersomatic/master/nextflow_schema.json",
    "title": "nf-core/sangersomatic pipeline parameters",
    "description": "Use Caveman and Pindel to call somatic mutations",
    "type": "object",
    "$definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["input", "outdir"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "schema": "assets/schema_input.json",
                    "mimetype": "text/csv/tsv",
                    "pattern": ["^\\S+\\.csv$", "^\\S+\\.tsv$"],
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/sangersomatic/usage#samplesheet-input).",
                    "fa_icon": "fas fa-file-csv"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                }
            }
        },
        "pipeline_options": {
            "title": "Options specific to this pipeline",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "required": ["max_read_counts"],
            "properties": {
                "sequencing_type": {
                    "type": "string",
                    "description": "sequencing protocol",
                    "enum": ["WGS", "WXS"],
                    "default": "WGS"
                },
                "species": {
                    "type": "string",
                    "description": "species name (eg Human) to input into caveman, required if bam file does not contain AS (Genome assembly identifier) and SP (Species) information to input into caveman estep",
                    "default": null
                },
                "species_assembly": {
                    "type": "string",
                    "description": "species assembly (eg Human) to input into caveman, required if bam file does not contain AS (Genome assembly identifier) and SP (Species) information to input into caveman estep",
                    "default": null
                }
            }
        },
        "caveman_options": {
            "title": "Options specific to caveman subworkflow",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "required": ["max_read_counts"],
            "properties": {
                "max_read_counts": {
                    "type": "integer",
                    "description": "maximum read counts to input into caveman",
                    "default": 500000
                },
                "normal_contamination": {
                    "type": "number",
                    "description": "match normal contamination in the sample/tumour to input into caveman estep",
                    "default": 0.1
                },
                "normal_cn": {
                    "type": "number",
                    "description": "copy number to use when filling gaps in the normal copy number file (see assets/schema_input.json)  to input into caveman estep",
                    "default": 2
                },
                "tumour_cn": {
                    "type": "number",
                    "description": "copy number to use when filling gaps in the tumour/samples copy number file (see assets/schema_input.json)  to input into caveman estep",
                    "default": 5
                },
                "species": {
                    "type": "string",
                    "description": "species name (eg Human) to input into caveman, required if bam file does not contain AS (Genome assembly identifier) and SP (Species) information to input into caveman estep",
                    "default": null
                },
                "species_assembly": {
                    "type": "string",
                    "description": "species assembly (eg Human) to input into caveman, required if bam file does not contain AS (Genome assembly identifier) and SP (Species) information to input into caveman estep",
                    "default": null
                },
                "normal_protocol": {
                    "type": "string",
                    "description": "normal sequencing protocol to input into caveman estep, (caveman: Ideally this should match tumour_protocol but not checked)",
                    "enum": ["WGS", "WXS", "RNA"],
                    "default": "WGS"
                },
                "tumour_protocol": {
                    "type": "string",
                    "description": "tumour/sample sequencing protocol to input into caveman estep, (caveman: Ideally this should match tumour_protocol but not checked)",
                    "enum": ["WGS", "WXS", "RNA"],
                    "default": "WGS"
                },
                "prior_mut_probability": {
                    "type": "number",
                    "description": "Prior somatic probability  to input into caveman estep",
                    "default": 0.000006
                },
                "prior_snp_probability": {
                    "type": "number",
                    "description": "Prior germline mutant probability to input into caveman estep",
                    "default": 0.0001
                }
            }
        },
        "pindel_options": {
            "title": "Options specific to pindel subworkflow",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "properties": {
                "pindel_ncpus": {
                    "type": "integer",
                    "description": "number of threads that pindel can use, default depending on the profile/config (4 for test, 8 for sanger_lsf)",
                    "default": null
                },
                "bamtobw_threads": {
                    "type": "integer",
                    "description": "number of threads that 'bamToBw.pl -p bamToBw' can use",
                    "default": null
                },
                "vafaugment_exonerate_mb": {
                    "type": "number",
                    "description": "Max memory to alow Exonerate to use (indel) [default: 6000] (part of cgpVaf.pl --augment command in pindel subworkflow)",
                    "default": null
                }
            }
        },
        "reference_genome_options": {
            "title": "Reference genome options",
            "type": "object",
            "fa_icon": "fas fa-dna",
            "description": "Reference genome related files and options required for the workflow.",
            "properties": {
                "genome": {
                    "type": "string",
                    "description": "Name of iGenomes/custom genome reference.",
                    "fa_icon": "fas fa-book",
                    "help_text": "If using a reference genome configured in the pipeline using iGenomes, use this parameter to give the ID for the reference. This is then used to build the full paths for all required reference genome files e.g. `--genome GRCh38`. \n\nSee the [nf-core website docs](https://nf-co.re/usage/reference_genomes) for more details."
                },
                "fasta": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "pattern": "^\\S+\\.fn?a(sta)?(\\.gz)?$",
                    "description": "Path to FASTA genome file.",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "igenomes_ignore": {
                    "type": "boolean",
                    "description": "Do not load the iGenomes reference config.",
                    "fa_icon": "fas fa-ban",
                    "hidden": true,
                    "help_text": "Do not load `igenomes.config` when running the pipeline. You may choose this option if you observe clashes between custom parameters and those supplied in `igenomes.config`."
                },
                "igenomes_base": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The base path to the igenomes reference files",
                    "fa_icon": "fas fa-ban",
                    "hidden": true,
                    "default": "s3://ngi-igenomes/igenomes/"
                },
                "custom_genome_base": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The base path to the custom genome reference files",
                    "fa_icon": "fas fa-ban",
                    "hidden": true,
                    "default": "${projectDir}/data/custom_reference_genomes"
                },
                "fai": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Path to FASTA genome index (fa.fai) file.",
                    "help_text": "This parameter is *mandatory* if `--genome` and `--custom_genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "hidepth": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Path to high depth region",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "hidepth_tbi": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Path to high depth region index (bed.tbi)",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "genome_gap": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Path to genome gap tab delimited file (genome.gap.tab)",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "caveman_ignore_contigs": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Path to the ignore contig file specific for caveman",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "simrep": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Path to tabix indexed simple/satellite repeats",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "simrep_tbi": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Path to tabix index file for the simple/satellite repeats",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "pindel_unmatch_panel": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Path to tabix indexed gff3 or bed of unmatched normal panel (see also pindel_np_from_vcf.pl)",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "pindel_unmatch_panel_tbi": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Path to index for tabix indexed gff3 or bed of unmatched normal panel (see also pindel_np_from_vcf.pl)",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "pindel_bad_loci": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Tabix indexed BED file of locations to not accept as anchors",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "pindel_bad_loci_tbi": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Tabix file of for locations to not accept as anchors",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "pindel_filter_rules": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "VCF filter rules file (see FlagVcf.pl for details)",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "pindel_soft_filter_rules": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Filter rules to be indicated in INFO field as soft flags",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "genes": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Tabix indexed coding gene footprints",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "genes_tbi": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Tabix file for coding gene footprints",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "pindel_exclude": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "Tabix indexed coding gene footprints",
                    "help_text": "Exclude this list of ref sequences from processing",
                    "fa_icon": "far fa-file-code"
                },
                "vagrent_dir": {
                    "type": "string",
                    "format": "directory-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "vagrent directory - should contain a vagrent cache file",
                    "help_text": "Exclude this list of ref sequences from processing",
                    "fa_icon": "far fa-file-code"
                },
                "caveman_flag_bed_dir": {
                    "type": "string",
                    "format": "directory-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "directory to bed files to flag caveman output",
                    "help_text": "Exclude this list of ref sequences from processing",
                    "fa_icon": "far fa-file-code"
                },
                "caveman_flag_config": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "caveman flag config",
                    "help_text": "Exclude this list of ref sequences from processing",
                    "fa_icon": "far fa-file-code"
                },
                "caveman_flag_to_vcf_config": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "caveman flag to vcf config",
                    "help_text": "Exclude this list of ref sequences from processing",
                    "fa_icon": "far fa-file-code"
                },
                "caveman_unmatch_dir": {
                    "type": "string",
                    "format": "directory-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "description": "directory to caveman unmatch panel",
                    "help_text": "Exclude this list of ref sequences from processing",
                    "fa_icon": "far fa-file-code"
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "max_multiqc_email_size": {
                    "type": "string",
                    "description": "File size limit when attaching MultiQC reports to summary emails.",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "default": "25.MB",
                    "fa_icon": "fas fa-file-upload",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                },
                "multiqc_config": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Custom config file to supply to MultiQC.",
                    "fa_icon": "fas fa-cog",
                    "hidden": true
                },
                "multiqc_logo": {
                    "type": "string",
                    "description": "Custom logo file to supply to MultiQC. File name must also be set in the MultiQC config file",
                    "fa_icon": "fas fa-image",
                    "hidden": true
                },
                "multiqc_methods_description": {
                    "type": "string",
                    "description": "Custom MultiQC yaml file containing HTML including a methods description.",
                    "fa_icon": "fas fa-cog"
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "pipelines_testdata_base_path": {
                    "type": "string",
                    "fa_icon": "far fa-check-circle",
                    "description": "Base URL or local path to location of pipeline test dataset files",
                    "default": "https://raw.githubusercontent.com/nf-core/test-datasets/",
                    "hidden": true
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/$definitions/input_output_options"
        },
        {
            "$ref": "#/$definitions/reference_genome_options"
        },
        {
            "$ref": "#/$definitions/institutional_config_options"
        },
        {
            "$ref": "#/$definitions/generic_options"
        },
        {
            "$ref": "#/$definitions/pindel_options"
        },
        {
            "$ref": "#/$definitions/caveman_options"
        },
        {
            "$ref": "#/$definitions/pindel_options"
        }

    ]
}
